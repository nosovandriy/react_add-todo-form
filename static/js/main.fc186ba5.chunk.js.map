{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","getUserById","userId","usersFromServer","find","App","useState","newTodos","setNewTodo","setTitle","setUserId","titleError","setTitleError","userError","setUserError","newTodo","Math","max","handleChange","event","target","value","Number","action","method","onSubmit","preventDefault","type","placeholder","onChange","disabled","element","onClick","trim","prevTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc186ba5.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <>\n      <article\n        data-id={todo.id}\n        className={classNames(\n          'TodoInfo',\n          {\n            'TodoInfo--completed': todo.completed,\n          },\n        )}\n      >\n        <h2 className=\"TodoInfo__title\">\n          {todo.title}\n        </h2>\n        {todo.user && (\n          <UserInfo user={todo.user} />\n        )}\n      </article>\n    </>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import React, { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\n\nimport './App.scss';\n\nfunction getUserById(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nconst todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [newTodos, setNewTodo] = useState<Todo[]>(todos);\n  const [title, setTitle] = useState<string>('');\n  const [userId, setUserId] = useState<number>(0);\n  const [titleError, setTitleError] = useState<boolean>(false);\n  const [userError, setUserError] = useState<boolean>(false);\n\n  const maxId = Math.max(...newTodos.map(todo => todo.id + 1));\n\n  const newTodo = {\n    id: maxId,\n    title,\n    completed: false,\n    userId,\n    user: getUserById(userId),\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement\n  | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'title':\n        setTitle(value);\n        setTitleError(false);\n        break;\n\n      case 'userId':\n        setUserId(Number(value));\n        setUserError(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const resetFields = () => {\n    setTitle('');\n    setUserId(0);\n    setTitleError(false);\n    setUserError(false);\n  };\n\n  const handleAddTodo = () => {\n    if (!title.trim()) {\n      setTitleError(true);\n    }\n\n    if (!userId) {\n      setUserError(true);\n    }\n\n    if (title.trim() && userId) {\n      setNewTodo(prevTodos => (\n        [...prevTodos, newTodo]\n      ));\n\n      resetFields();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              name=\"title\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={handleChange}\n            />\n          </label>\n          {titleError\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              name=\"userId\"\n              data-cy=\"userSelect\"\n              value={userId}\n              onChange={handleChange}\n            >\n              <option\n                value=\"0\"\n                disabled\n              >\n                Choose a user\n              </option>\n              {[...usersFromServer].map(element => (\n                <option\n                  value={element.id}\n                  key={element.id}\n                >\n                  {element.name}\n                </option>\n              ))}\n\n            </select>\n          </label>\n\n          {userError\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={handleAddTodo}\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={newTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}